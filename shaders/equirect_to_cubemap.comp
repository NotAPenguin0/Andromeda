#version 450

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0) uniform sampler2D equirectangular;
layout (binding = 1, rgba32f) uniform imageCube cube_map;

vec3 view_pos = vec3(0, 0, 0);

vec3 view_target[6] = {
    vec3(1, 0, 0),
    vec3(-1, 0, 0),
    vec3(0, -1, 0),
    vec3(0, 1, 0),
    vec3(0, 0, 1),
    vec3(0, 0, -1)
};

vec3 view_up[6] = {
    vec3(0, 1, 0),
    vec3(0, 1, 0),
    vec3(0, 0, 1), // +Y
    vec3(0, 0, -1), // -Y
    vec3(0, 1, 0),
    vec3(0, 1, 0)
};

mat4 look_at(vec3 pos, vec3 target, vec3 world_up) {
    vec3 fwd = normalize(target - pos);
    vec3 right = cross(world_up, fwd);
    vec3 up = cross(fwd, right);
    return mat4(vec4(right, 0), vec4(up, 0), vec4(fwd, 0), vec4(pos, 1));
}

// Remaps uv coordinates to a position in range [-1, 1]
vec2 uv_to_quad_pos(vec2 uv) {
    return uv * 2.0f - 1.0f;
}

vec3 to_local_direction(vec2 uv, int face) {
     mat4 view = look_at(view_pos, view_target[face], view_up[face]);
     return (view * vec4(uv_to_quad_pos(uv), 1, 1)).xyz;
}

const vec2 inv_atan = vec2(0.1591, 0.3183);
vec2 sample_spherical_map(vec3 v) {
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= inv_atan;
    uv += 0.5;
    return uv;
}

void main() {
    int face_size = imageSize(cube_map).x;
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / float(face_size);
    vec2 equirect = sample_spherical_map(normalize(to_local_direction(uv, int(gl_GlobalInvocationID.z))));

    vec4 color = texture(equirectangular, equirect);
    ivec3 cube_texels = ivec3(gl_GlobalInvocationID.xyz);
    imageStore(cube_map, cube_texels, color);
}